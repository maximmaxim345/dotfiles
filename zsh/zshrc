# ZSH Configuration

# Define directories to add to PATH
directories=(
    "/usr/local/bin"
    "$HOME/.local/bin"
    "$HOME/.cargo/bin"
    "$HOME/.local/share/bob/nvim-bin" # Add nvim to path (with highest priority)
)

# Add directories to PATH if they exist
for dir in "${directories[@]}"; do
    [[ -d "$dir" ]] && path=("$dir" $path)
done

# Initialize Starship, a cross-shell prompt
if command -v starship &> /dev/null; then
    eval "$(starship init zsh)"
fi

# Add brew to path
if [[ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# Kitty specific tweaks/aliases
if [[ $TERM == "xterm-kitty" ]]; then
    alias ssh="kitten ssh"
    alias klight="kitten themes --reload-in=all 'Atom One Light'"
    alias kdark="kitten themes --reload-in=all 'Base2Tone Drawbridge Dark'"
fi

# Export environment variables
export PATH
export npm_config_prefix="$HOME/.local"
export NEOVIDE_MULTIGRID=1

# Source local zshrc if it exists
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# Define aliases for common commands
alias de="distrobox-enter"
alias d="distrobox"
alias n="nvim"
alias nv="neovide"
alias lg="lazygit"
alias ls='ls --color=auto'
alias ll='ls --color=auto -alh'

# Install and setup Zinit, a flexible ZSH plugin manager
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
zinit ice depth=1
zinit ice lucid wait='0' atinit='zi creinstall -q'

# Load plugins with zinit
zinit light-mode for \
    zsh-users/zsh-syntax-highlighting \
    zsh-users/zsh-autosuggestions \
    marlonrichert/zsh-autocomplete \
    zsh-users/zsh-completions \
    zsh-users/zsh-history-substring-search

# Use zoxide if possible
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
else
    zinit lightmode agkozak/zsh-z
fi

# Configure autocomplete and syntax highlighting
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>' 
export ZSHZ_NO_RESOLVE_SYMLINKS=1
export ZSHZ_CASE=smart
setopt autocd
zstyle ':completion:*' menu select
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' case-sensitive true
zstyle ':autocomplete:*' delay 0

# Configure history
HISTFILE=~/.zsh_history
HISTSIZE=10000
HISTDUP=erase
SAVEHIST=10000
setopt appendhistory
setopt sharehistory
setopt incappendhistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups


# Configure key bindings
() {
   local -a prefix=( '\e'{\[,O} )
   local -a up=( ${^prefix}A ) down=( ${^prefix}B )
   local key=
   for key in $up[@]; do
      bindkey "$key" up-line-or-history
   done
   for key in $down[@]; do
      bindkey "$key" down-line-or-history
   done
}
bindkey '\t' menu-complete
bindkey '^[[Z' reverse-menu-complete
HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1
HISTORY_SUBSTRING_SEARCH_FUZZY=1
bindkey '^[[A' history-substring-search-up # or '\eOA'
bindkey '^[[B' history-substring-search-down # or '\eOB'
bindkey '^H' backward-kill-word
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word
